#+title: Paradigms of Artificial Intelligence Programming Notes

* 03-PAIP
** Preface
This book is designed to help people become experts in Lisp and AI.

Has exercises labeled with four difficulty levels:

| level | meaning   | time-to-completion |
|-------+-----------+--------------------|
| s     | simple    | seconds            |
| m     | medium    | minutes            |
| h     | hard      | hours              |
| d     | difficult | days               |

** Chapter 01 - Introduction to Lisp
Just the basics. If you did Touretzky's book, you don't really need to read it.

Norvig seems to prefer ~FIRST~, ~LAST~, etc. over ~CAR~ and ~CDR~. [[https://www.xach.com/naggum/articles/3092837184154309@naggum.no.html][According to Erik Naggum]], the ~LIST~ abstraction is designed to be different from the ~CONS~ abstraction, and as such, it seems ~FIRST~, ~LAST~, etc. are specific to the ~LIST~ abstraction

One thing I didn't notice while completing Touretzky's book: ~FIRST~, ~SECOND~, etc. return an atom, but ~LAST~ returns a list. ~LAST~ can return n items at the end of a list.

#+begin_src lisp
(last '(five four (three two) one))
(last '(five four (three two) one) 2)
#+end_src

#+RESULTS:
| (THREE TWO) | ONE |

** Chapter 02 - A Simple Lisp Program
:LOGBOOK:
CLOCK: [2024-09-15 Sun 14:48]--[2024-09-15 Sun 15:59] =>  1:11
CLOCK: [2024-09-15 Sun 07:46]--[2024-09-15 Sun 12:19] =>  4:33
:END:
*** RULES
This chapter introduces rule-based programming. Rich Hickey says that rules are simpler (and more preferable) than conditionals.

Norvig says something similar.

#+begin_quote
The program works fine, and the trace looks just like the sample derivation above, but the Lisp definitions are a bit harder to read than the original grammar rules...The problem is that the rules for Adj* and PP* contain choices that we would have to represent as some kind of conditional in Lisp...The point is that what started out as simple functions are now becoming quite complex. To understand them, we need to know many Lisp conventions-defun, (), case, if, quote, and the rules for order of evaluation-when ideally the implementation of a grammar rule should use only linguistic conventions.
#+end_quote

The point is that functions that define rules like ~noun-phrase~ need to be rewritten when adding new rules.

#+begin_quote
The two versions of the preceding program represent two alternate approaches that come up time and time again in developing programs: (1) Use the most straightforward mapping of the problem description directly into Lisp code. (2) Use the most natural notation available to solve the problem, and then worry about writing an interpreter for that notation.

Approach (2) involves an extra step, and thus is more work for small problems. However, programs that use this approach are often easier to modify and expand.
#+end_quote

The second, simple approach of using a rule-based, data-driven approach leads to code that is more extensible. Norvig doesn't say it, but I think it is probably more "composable".

The addition of a larger grammar demonstrates how easy it is to extend the grammar. No need to modify previously defined functions like ~generate~ or write some function named ~Prep~.

The simpler version also allows us to easily add features without modifying many disparate functions or files.

*** INTRODUCING AND USING VARIABLES
#+begin_quote
let is the most common way of introducing variables that are not parameters of functions. One must resist the temptation to use a variable without introducing it:

(defun generate (phrase)
  (setf choices ...)         ;; wrong!
  ... choices ...)
#+end_quote

Here we see the expression "introducing variables".


** Chapter 03 - Overview of Lisp
:LOGBOOK:
CLOCK: [2024-09-16 Mon 17:01]--[2024-09-17 Tue 13:59] => 20:58
:END:
*** 3.1 A GUIDE TO LISP STYLE
#+begin_quote
Be specific.
Use abstractions.
Be concise.
Use the provided tools.
Don't be obscure.
Be consistent.
#+end_quote

There are some specific parts of Lisp here that weren't covered in Touretzky (DEFINE-SETF-METHOD, DEFSETF, etc.), and it has very useful comparison charts showing comparisons between Common Lisp and Pascal. I see them, plus [[https://www.norvig.com/python-lisp.html][Norvig's own comparison]] to Python, as a great starting point for comparing Python and JS in the masterclass.
*** SPECIAL FORMS
| definitions  | conditional | variables | iteration | other    |
|--------------+-------------+-----------+-----------+----------|
| defun        | and         | let       | do        | declare  |
| defstruct    | case        | let*      | do*       | function |
| defvar       | cond        | pop       | dolist    | progn    |
| defparameter | if          | push      | dotimes   | quote    |
| defconstant  | or          | setf      | loop      | return   |
| defmacro     | unless      | incf      |           | trace    |
| labels       | when        | decf      |           | untrace  |

*** FUNCTIONS
There are functions for working with different kinds of data.

- Lists
- Sequences
- Tables (assoc, make-hash-table)
- Trees
- Numbers
- Sets

*** PRINT AND PRINC
#+begin_src lisp
(with-open-file (stream "test.text" :direction :output)
    (print '(hello there) stream)
    (princ 'goodbye stream))

(with-open-file (stream "test.text" :direction :input)
    (list (read stream) (read-char stream) (read stream)
          (read stream nil 'eof)))
#+end_src
*** ERRORS
#+begin_src lisp
;; Assert can also include an error message to show in SLIME/SLY
(defun squirt (num)
  "Square a number"
  (assert (numberp num) (num)
          "~s ain't a number you retard." num)
  (* num num))
#+end_src
*** MULTIPLE VALUES
**** RETURNING MULTIPLE VALUES
#+begin_src lisp
(values 1 2 3)
#+end_src

#+RESULTS:
: 1

Usually, for functions that return multiple values, all but the first value are ignored. ~round~ is an example.

#+begin_src lisp
(round 42.69)
#+end_src

#+RESULTS:
: 43

**** BINDING MULTIPLE RETURNED VALUES
If you want to access the other values that are otherwise ignored, use ~multiple-value-bind~.

#+begin_src lisp
(multiple-value-bind (int rem)
    (round 42.69)
  (format nil "~&~a is the integer, and ~a is the remainder." int rem))
#+end_src

#+RESULTS:
: 43 is the integer, and -0.31000137 is the remainder.

#+begin_src lisp
(multiple-value-bind (a b c) (values 1 2 3)
  (print c))
#+end_src

#+RESULTS:
: 3
*** MATCHING FUNCTIONS
Functions that have a ~:test~, ~:test-not~, or ~:key~ parameter are called "matching functions". They include:

- sublis (tree function)
- subst (tree function)
- union (set function)
- member (set function)
- intersection (set function)
- set-difference (set function)
- subsetp (set function)
- position (sequence function)
- remove (sequence function)
- remove-if (sequence function)
- remove-if-not (sequence function)
- find (sequence function)
- assoc (table function)
- rassoc (table function)

  #+begin_quote
  By default, each [matching function] tests if some item is eql to one or more of a series of other objects.
  #+end_quote
*** SEQUENCE FUNCTIONS
#+begin_quote
The most common type of sequence is the list, but strings and vectors can also be used as sequences. A sequence function performs some action repeatedly for some elements of a sequence.
#+end_quote
*** ALIASING BUILT-IN FUNCTIONS
#+begin_quote
It is sometimes useful to have two names for the same function viewed in different ways (like not and null). The new name could be defined with a defun, but it is easier to just copy over the definition:
#+end_quote

#+begin_src lisp
(setf (symbol-function 'find-all-if) #'remove-if-not)
#+end_src

#+RESULTS:
: #<FUNCTION REMOVE-IF-NOT>

Now ~find-all-if~ aliases ~remove-if-not~. They do exactly the same thing.

#+begin_src lisp
(remove-if-not #'oddp '(1 2 3 4 5 6 7 8 9))
#+end_src

#+RESULTS:
| 1 | 3 | 5 | 7 | 9 |

#+begin_src lisp
(find-all-if #'oddp '(1 2 3 4 5 6 7 8 9))
#+end_src

#+RESULTS:
| 1 | 3 | 5 | 7 | 9 |

** Chapter 04 - GPS: The Genera Problem Solver
*** SEMIPREDICATES
#+begin_quote
Functions that return nil as an indication of failure and return some useful value otherwise are known as semipredicates. They are error prone in just these cases where nil might be construed as a useful value. Be careful when defining and using semipredicates: (1) Decide if nil could ever be a meaningful value. (2) Insure that the user can't corrupt the program by supplying nil as a value. In this program, GPS is the only function the user should call, so once we have accounted for it, we're covered. (3) Insure that the program can't supply nil as a value.
#+end_quote

*** SWITCHING FROM DESTRUCTIVE TO NON-DESTRUCTIVE OPERATION
#+begin_quote
The function apply-op, which used to change the state irrevocably and print a message reflecting this, now returns the new state instead of printing anything.
#+end_quote
Switching from imperative to functional style.
*** PUNS
#+begin_quote
If we go back and look at the function `GPS`, we find that it reports the result by removing all atoms from the state returned by `achieve-all`.
This is a "pun"-we said remove atoms, when we really meant to remove all conditions except the `(START)` and `(EXECUTING *action*)` forms.
Up to now, all these conditions were atoms, so this approach worked.
The maze domain introduced conditions of the form (`AT` *n*), so for the first time there was a problem.
The moral is that when a programmer uses puns-saying what's convenient instead of what's really happening-there's bound to be trouble.
What we really want to do is not to remove atoms but to find all elements that denote actions.
#+end_quote

In other words, the "straightforward" solution is again insufficient to the task.

After the example here and previously in chapter 2, the question is: should we begin with the straightforward solution first, or should be begin with the abstraction that codifies our real, full intention? This is just another variant of the discussion regarding abstraction and "premature abstraction".

This is one of those philosophical divides that inevitably sends programmers in vastly different directions career and self-development wise.

My feeling is this: if you know your full intentions, you should probably codify them if the effort isn't too high. You should simply be comfortable with making big, scary refactors of your code if you realize that your choice to leave puns in your code is now a problem. Since you don't know for certain if an abstraction is necessary or not, every choice to abstract or not is accompanied by some risk. You risk doing too much work now that is later found to be unnecessary, or you do too little work now that is found to be necessary.

I think the choice to abstract or not is usually a sign of programmer maturity and skill level. The skilled and mature programmer will often tend toward more abstractions earlier both because they have the experience to know which abstractions are likely to be useful, but they'll also probably prefer fewer, simpler abstractions with greater reach.

*** SET-DIFFERENCE & UNION VS. REMOVE-IF & APPEND

There are two versions of ~apply-op~. The first one is this:
#+begin_src lisp
(defun apply-op (op)
  "Print a message and update *state* if op is applicable."
  (when (every #'achieve (op-preconds op))
    (print (list 'executing (op-action op)))
    (setf *state* (set-difference *state* (op-del-list op)))
    (setf *state* (union *state* (op-add-list op)))
  t))

#+end_src
The second is this:
#+begin_src lisp
(defun apply-op (state goal op goal-stack)
  "Print a message and update *state* if op is applicable."
  (dbg-indent :gps (length goal-stack) "Consider: ~a" (op-action op))
  (let ((state2 (achieve-all state (op-preconds op)
                             (cons goal goal-stack))))
    (unless (null state2)
      (dbg-indent :gps (length goal-stack) "Action: ~a" (op-action op))
      (append (remove-if #'(lambda (x)
                             (member-equal x (op-del-list op)))
                         state2)
              (op-add-list op)))))
#+end_src

One thing to notice is the different treatment of the data. In the first, ~set-difference~ and ~union~ are used to set the state. In other words, for simplicity sake, the state was treated as an unordered list of unique items.

I am not sure what problem the ordering is fixing.
*** MANUALLY DEFINED VS. PRAGMATICALLY DEFINED OPS
For most of the examples, Norvig uses manually-written ops. ~*school-ops*~, ~*maze-ops*~, etc.

In the blocks world domain example, he programmatically defines the ops.
#+begin_src lisp
(defun make-block-ops (blocks)
  (let ((ops nil))
    (dolist (a blocks)
      (dolist (b blocks)
        (unless (equal a b)
          (dolist (c blocks)
            (unless (or (equal c a) (equal c b))
              (push (move-op a b c) ops)))
          (push (move-op a 'table b) ops)
          (push (move-op a b 'table) ops))))
    ops))
#+end_src

That's possible because the block ops need to also encode the various possible "states" of the blocks
*** MISC
Most of the exercises don't have answers provided, so I won't be doing them.

** Chapter 05 - ELIZA: Dialog with a Machine
*** Pattern matching
This chapter has a great example of using ~sublis~:
#+begin_src lisp
(defun extend-bindings (var val bindings)
   "Add a (var . value) pair to a binding list. "
   (cons (cons var val)
         ;; Once we add a "real" binding,
         ;; we can get rid of the dummy no-bindings
         (if (eq bindings no-bindings)
             nil
             bindings)))

> (sublis (pat-match ' (i need a ?X) ' (i need a vacation))
          '(what would it mean to you if you got a ?X ?))

(WHAT WOULD IT MEAN TO YOU IF YOU GOT A VACATION ?)
#+end_src
** Chapter 06 - Building Software Tools
*** DATA-DRIVEN PROGRAMMING
#+begin_quote
The solution to this dilemma is to write one version of `segment-pattern-p` and `segment-matcher`, once and for all, but to have these functions refer to a table of pattern/action pairs.
The table would say "if you see `?*` in the pattern, then use the function `segment-match`," and so on.
Then programmers who want to extend the matcher just add entries to the table, and it is trivial to merge different extensions (unless of course two programmers have chosen the same symbol to mark different actions).

This style of programming, where pattern/action pairs are stored in a table, is called *data*-*driven programming*.
It is a very flexible style that is appropriate for writing extensible systems.
#+end_quote

** Chapter 07 - STUDENT: Solving Algebra Word Problems
** Chapter 08 - Symbolic Mathematics: A Simplification Program
** Chapter 09 - Efficiency issues
** Chapter 10 - Low-Level Efficiency Issues
** Chapter 11 - Logic Programming
** Chapter 12 - Compiling Logic Programs
** Chapter 13 - Object-Oriented Programming
** Chapter 14 - Knowledge Representation and Reasoning
** Chapter 15 - Symbolic Mathematics with Canonical Forms
** Chapter 16 - Expert Systems
** Chapter 17 - Line-Diagram Labeling by Constraint Satisfaction
** Chapter 18 - Search and the Game of Othello
** Chapter 19 - Introduction to Natural Language
** Chapter 20 - Unification Grammars
** Chapter 21 - A Grammar of English
** Chapter 22 - Scheme: An Uncommon Lisp
** Chapter 23 - Compiling Lisp
** Chapter 24 - ANSI Common Lisp
** Chapter 25 - Troubleshooting
* NOTES
Although the book provides exercises, in practice they don't feel useful. Easy questions sometimes feel like trivia questions, and hard questions often don't have answers in the book. If a book has exercises with no answers, it's clear that it was supposed to be supplemented by a teacher.
